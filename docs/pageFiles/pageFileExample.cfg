#pageFileExample.cfg

DISPLAY:
  size: 100, 16    # Size of the display in pixels

FONTS:
  small: hd44780.fnt
  large: Vintl01_10x16.fnt
  tiny: upperascii_3x5.fnt
  DejaVuSans28:
      file: DejaVuSans.ttf
      type: Truetype
      size: 28

DEFAULTS:
  paths:
    'images': '../tests/reference/images'
    'fonts': '../fonts/'
  widgets:
    scroll: &scroll
      type: scroll
      gap: 25%, 0
      size: 100, 8
      actions:
        - pause, 2
        - rtl

WIDGETS:

  # STARTING WIDGET
  splash:
      type: image
      file: pydPiper_splash.png

  ### PLAY WIDGETS ###

  # NOW PLAYING
  nowPlaying:
      type: text
      format: NOW PLAYING
      font: tiny
  nowPlayingData:
      type: text
      font: tiny
      value: f"{db['plPos']} OF {db['plLen']}"
      size: 50, 5
      just: rt

  # ARTIST, TITLE, ALBUM
  artist:
      type: text
      variables: db['artist']
      effect: *scroll
  album:
      type: text
      variables: db['album']
      effect: *scroll
  title:
      type: text
      variables: db['title']
      effect: *scroll

  # ELAPSED
  elapsed:
      type: text
      variables: time.strftime('%-M:%S', time.gmtime(db['elapsed']))

  elapsedLength:
      type: text
      variables:
        - time.strftime(%-M:%S', time.gmtime(db['seek']))
        - time.strftime(%-M:%S', time.gmtime(db['duration']))
      format: '{0}/{1}'

  # PROGRESS
  songProgress:
      type: progressBar
      value: db['elapsed']
      range: 0, db['length']
      size: 100, 1

  # RADIO
  radio:
      type: text
      format: RADIO

  ### STOP WIDGETS ###

  # TIME
  time:
      type: text
      font: large
      just: rt
      value: time.strftime('%-I:%M',time.localtime(sys['time']))
      size: 50, 16
  amPm:
      type: text
      font: tiny
      variables: time.strftime('%p',time.localtime(sys['time']))

  # WEATHER
  tempSmall:
      type: text
      format: "Temp\n{0}"
      variables:  "'{0}°{1}'.format(int(weather['tempOutside']),cfg['tempCF'])"
      just: rt
      size: 30, 16

  tempHiLow:
      type: text
      format: "h {0}\nl {1}"
      variables:
        - "'{0}°{1}'.format(int(weather['tempMax']),cfg['tempCF'])"
        - "'{0}°{1}'.format(int(weather['tempMin']),cfg['tempCF'])"
      just: rt
      size: 30, 16

  tempLarge:
      type: text
      font: large
      variables:  "'{0}°{1}'.format(int(weather['tempOutside']),cfg['tempCF'])"
      just: center
      size: 30, 16

  weather:
      type: text
      variables: weather['conditions'].capitalize()
      effect:
        <<: *scroll
        size: 70, 16

  ### ANNOUCEMENT WIDGETS ###

  # VOLUME
  volume:
      type: text
      font: tiny
      format: 'VOLUME ({0})'
      variables: db['volume']
      size: 80, 8
  volumeBar:
      type: progressBar
      mask: progressbar_100x8.png
      variables: db['volume']
      rangeVal: 0, 100

  # MEDIA
  showPlay:
    type: text
    format: '▶ PLAY'
    size: 100, 16

  showStop:
    type: text
    format: "\u23f9 STOP"
    size: 100, 16

  repeatOnceSymbol:
    type: text
    format: '🔂'
    size: 20, 16

  repeatOnce:
    type: text
    format: "Repeat Once\n{0}"
    variables: "{False: 'Off', True:'On'}.get(db['single'])"
    size: 85, 16

  repeatAllSymbol:
    type: text
    format: '🔁'
    size: 20, 16

  repeatAll:
    type: text
    format: "Repeat Once\n{0}"
    variables: "{False: 'Off', True:'On'}.get(db['repeat'])"
    size: 85, 16

  randomSymbol:
    type: text
    format: '🔀'
    size: 20, 16

  random:
    type: text
    format: "Random\n{0}"
    variables: "{False: 'Off', True:'On'}.get(db['random'])"
    size: 85, 16

  # SYSTEM TOO HOT
  tempTooHot:
    type: text
    format: "🔥 Warning\nSystem Too Hot ({0})"
    variables: sys['temp']
    size: 100, 16


CANVASES:

  # PLAY CANVASES
  playArtist:
    placements:
      - artist, 0, 6, lt
      - nowPlaying, 0, 0
      - nowPlayingData, 50, 0
      - songProgress, 0, 15
    size: 100, 16
  playArtistRadio:
    placements:
      - artist, 0, 0
      - radio, 0, 8
      - elapsed, 0, 0, 'rb'
    size: 100, 16
  playAlbum:
    placements:
      - album, 0,6
      - nowPlaying, 0,0
      - nowPlayingData, 50, 0
      - songProgress, 0, 15
    size: 100,16
  playAlbumRadio:
    placements:
      - album, 0, 0
      - radio, 0, 8
      - elapsed, 0, 0, 'rb'
    size: 100, 16
  playTitle:
    placements:
      - title, 0, 6
      - nowPlaying, 0,0
      - nowPlayingData, 50, 0
      - songProgress, 0, 15
    size: 100, 16
  playTitleRadio:
    placements:
      - title, 0, 0
      - radio, 0, 8
      - elapsed, 0, 0, 'rb'
    size: 100,16

  # MEDIA ANNOUNCEMENT CANVASES
  volume:
    placements:
      - volume, 3, 0
      - volumeBar, 0, 8
    size: 100, 16
  showRandom:
    placements:
      - randomSymbol, 0, 0
      - random, 15, 0
    size: 100, 16
  showRepeatOnce:
    placements:
      - repeatOnceSymbol, 0, 0
      - repeatOnce, 15, 0
    size: 100, 16
  showRepeatAll:
    placements:
      - repeatAllSymbol, 0, 0
      - repeatAll, 15, 0
    size: 100, 16

  # STOP CANVASES
  stopTime:
    placements:
      - time, 16, 1
      - amPm, 70, 2
    size: 100, 16

  stopTimePopUp:
    placements:
      - time, 6, 1
      - amPm, 60, 1
      - tempSmall, 70, 0
      - weather, 0, 16
      - tempHiLow, 70, 16
    size: 100, 32
    effect:
      type: popUp
      size: 100, 16
      delay: 8, 4


SEQUENCES:

  # STARTING SEQUENCE
  seqSplash:
    canvases:
      - name: splash
    condition: db['state'][0:5]=='start'
    minDuration: 5
    priority: 1
    placement: 0,0
    just: 'lt'

  seqPlay:
    canvases:
      - name: playArtist
        duration: 15
        condition: not db['stream'] == 'webradio'
      - name: playArtistRadio
        duration: 15
        condition: db['stream'] == 'webradio'
      - name: playAlbum
        duration: 15
        condition: not db['stream'] == 'webradio'
      - name: playAlbumRadio
        duration: 15
        condition: db['stream'] == 'webradio'
      - name: playTitle
        duration: 15
        condition: not db['stream'] == 'webradio'
      - name: playTitleRadio
        duration: 15
        condition: db['stream'] == 'webradio'
    condition: db['state']=='play'
    priority: 10

  seqStop:
    canvases:
      - name: stopTime
        condition: "'tempMax' not in weather"
      - name: stopTimePopUp
        condition: "'tempMax' in weather"
    condition: db['state']=='stop'
    priority: 10

  seqVolume:
    canvases:
      - name: volume
    condition: changed(db['volume'])
    minDuration: 2
    priority: 5


  seqAnnouncePlay:
    canvases:
      - name: showPlay
    condition: changed(db['state']) and db['state']=='play'
    minDuration: 2
    priority: 5

  seqAnnounceStop:
    canvases:
      - name: showStop
    condition: changed(db['state']) and db['state']=='stop'
    minDuration: 2
    priority: 5

  seqAnnounceRandom:
    canvases:
      - name: showRandom
    condition: changed(db['repeat'])
    minDuration: 2
    priority: 5

  seqAnnounceSingle:
    canvases:
      - name: showStop
    condition: changed(db['single'])
    minDuration: 2
    priority: 5

  seqAnnounceRepeat:
    canvases:
      - name: showStop
    condition: changed(db['repeat'])
    minDuration: 2
    priority: 5

  seqAnnounceTooHot:
    canvases:
      - name: tempTooHot
    condition: sys['temp']>85
    minDuration: 5
    priority: 5
    coolingPeriod: 30
