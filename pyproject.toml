[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tinydisplay"
version = "2.0.0"
description = "High-performance display framework for embedded devices"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "tinyDisplay Team", email = "team@tinydisplay.org"}
]
maintainers = [
    {name = "tinyDisplay Team", email = "team@tinydisplay.org"}
]
keywords = ["embedded", "display", "raspberry-pi", "gui", "framework", "sbc"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware",
    "Topic :: Multimedia :: Graphics",
    "Operating System :: POSIX :: Linux",
    "Environment :: Other Environment",
]
requires-python = ">=3.8"

# Core dependencies - minimal and strictly necessary
dependencies = [
    "asteval>=0.9.28,<1.0.0",  # Safe expression evaluation for DSL
    "pillow>=9.0.0,<11.0.0",   # Image processing and pixel operations
]

# Optional dependencies for development and testing
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
performance = [
    "psutil>=5.9.0",  # System monitoring for performance tests
    "memory-profiler>=0.60.0",  # Memory usage profiling
]

[project.urls]
Homepage = "https://github.com/tinydisplay/tinydisplay"
Documentation = "https://tinydisplay.readthedocs.io/"
Repository = "https://github.com/tinydisplay/tinydisplay"
Issues = "https://github.com/tinydisplay/tinydisplay/issues"
Changelog = "https://github.com/tinydisplay/tinydisplay/blob/main/CHANGELOG.md"

[project.scripts]
tinydisplay-migrate = "tinydisplay.migration:main"

# Tool configurations
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
tinydisplay = ["py.typed"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | legacy-backup
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
known_first_party = ["tinydisplay"]
known_third_party = ["PIL", "asteval", "pytest"]
multi_line_output = 3
lines_after_imports = 2
force_grid_wrap = 0
combine_as_imports = true
include_trailing_comma = true

# mypy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -v --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "performance: marks tests as performance tests (deselect with '-m \"not performance\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-related tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/tinydisplay"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "docs/*",
    "legacy-backup/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
