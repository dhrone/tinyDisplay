#pageFileExample.cfg

DISPLAY:
  model: hd44780 # Model of the display being used
  type: char     # Type of display, character or graphical (char or graph)
  size: 16, 2    # Size of the display in characters if a char type device or pixels for graphical devices

APIS:
  weather: # Name of the dataset to place the results of the API calls
    source:
      type: rss # Type of web services.  Valid values are rss, json
      pollFrequency: 10800 # How often to retrieve data in seconds.  (10800 is every 3 hours)
      endpoints:
        - daily, https://weather-broker-cdn.api.bbci.co.uk/en/observation/rss/{station}
        - forecast, https://weather-broker-cdn.api.bbci.co.uk/en/forecast/rss/3day/{station}
    station: !include weather_station_id.txt # 4758023 for Fairfax Virginia
    outsideTemp: weather['daily']['entries'][0]['summary_detail']['value'].split(',')[0].split(':')[1].split()[1][1:-3]
    outsideMax: weather['forecast']['entries'][0]['summary_detail']['value'].split(',')[0].split(':')[1].split()[1][1:-3]
    outsideMin: weather['forecast']['entries'][0]['summary_detail']['value'].split(',')[1].split(':')[1].split()[1][1:-3]
    observation: weather['forecast']['entries'][0]['title'].split(',')[0].split(':')[1].strip()

VARIABLE_HANDLERS: # Used to filter and transform data coming into datasets
  cfg: # Name of the dataset
    variables:
      tempCF:
        value: "{'fahrenheit':'F', 'celsius': 'C'}.get(cfg['temperatureScale'].lower())"
        frequency: once # Can be once, every, change or an integer n.
                        # If once, it gets computed at startup.
                        # If every, it gets computed every time an evaluation is conducted
                        # If change, it gets computed if the dataset has changed
                        # If an integer, it gets updated every n seconds

FONTS:
  small: hd44780.fnt
  large: BigFont_10x16_fixed.fnt
  tiny: upperasciiwide_3x5_fixed.fnt
  DejaVuSans28:
      file: DejaVuSans.ttf
      type: Truetype
      size: 28

WIDGET_DEFAULTS:

  scroll:
      condition: widget['width'] >= display['width'] # test to see if scrolling should be performed.  If True, scroll is enabled.
      distance: 1 # Number of pixels to scroll by
      speed: 60 # update frequency in frames per second (refresh rate of display must be both as least as fast and a multiple of this number)
      gap: (25%, 10%) # Number of pixels in x and y dimension (or percentage of scroll display dimension) to add in the direction of scrolling (creates space between the beginning and the end of the scrolled widget)
      actions:    # Set of scrolling actions to perform.
        - pause, 3      # Pause scrolling for n number of seconds
        - rtl           # Scroll in a set direction for 'count' number of updates or until scroll returns to start
                        # Possible directions are rtl (right to left), ltr (left to right), ttb (top to bottom) and btt (bottom to top)
                        # If count is omitted the widget will scroll until it has reached its starting point

  slide:
      distance: 1
      speed: 60
      actions:      # Set of sliding actions to perform.
        - pause, 3
        - rtl       # If count is omitted the widget will slide until it has reached a display boundary

  text:
      font: small
      just: left

WIDGETS:
  splash:
      type: image
      file: pydPiper_splash.png

  nowplaying:
      type: text
      format: NOW PLAYING
  nowplayingdata:
      type: text
      font: tiny
      format: '{0} of {1}'
      variables: db['position'], len(db['queue'])]
      size: 50, 5
      just: right

  artist:
      type: text
      variables: db['artist']
  scrollArtist:
      type: scroll
      widget: artist
  album:
      type: text
      variables: db['album']
      add: scroll
  title:
      type: text
      variables: db['title']
      add: scroll


  elapsed:
      type: text
      variables: time.strftime('%-M:%S', time.gmtime(db['elapsed']))

  elapsedLength:
      type: text
      variables:
        - time.strftime(%-M:%S', time.gmtime(db['seek']))
        - time.strftime(%-M:%S', time.gmtime(db['duration']))
      format: '{0}/{1}'


  radio:
      type: text
      format: RADIO

  volume:
      type: text
      font: tiny
      format: 'VOLUME ({0})'
      size: 80, 8

  volumeBar:
      type: progressBar
      mask: progressbar_100x8.png
      variables: db['volume']
      rangeVal: 0, 100

  songProgress:
      type: progressBar
      variables: db['seek']
      rangeVal: 0, db['duration']
      size: 100, 1

  time:
      type: text
      font: tiny
      just: right
      variables: sys['localtime'].strftime('%-I:%M')
      size: 50, 16
  amPm:
      type: text
      font: tiny
      variables: sys['localtime'].strftime('%p')

  tempSmall:
      type: text
      format: 'Temp\n{0}'
      variables:  "f'{int(weather['outsideTemp'])}째{cfg['tempCF']}'"
      just: right
      size: 30, 16

  tempHiLow:
      type: text
      format: 'h {0}\nl {1}'
      variables:
        - "f'{int(weather['outsideTempMax'])}째{cfg['tempCF']}'"
        - "f'{int(weather['outsideTempMin'])}째{cfg['tempCF']}'"
      just: right
      size: 30, 16

  tempLarge:
      type: text
      font: large
      variables:  "f'{int(weather['outsideTemp'])}째{cfg['tempCF']}'"
      just: center
      size: 30, 16

  weather:
      type: text
      font: large
      variables: db['outsideConditions'].capitalize()
      size: 70, 16
      add: scroll


CANVASES:
  splash:
    widgets:
      - splash:
        offset: 0, 0
        just: mm
    size: display['width'], display['height']
  playArtist:
    widgets:
      - scrollArtist: 0, 6
      - nowplaying: 0, 0
      - nowplayingdata: 50, 0
      - songprogress: 0, 15
    size: 100, 16
  playArtistRadio:
    widgets:
      - scrollArtist: 0, 0
      - radio: 0, 8
      - elapsed: 50, 8
    size: 100, 16

SEQUENCES:
  - name: seqPlay
    canvases:
      - name: playartist
        duration: 15
        condition: not db['stream'] == 'webradio'
      - name: playartistRadio
        duration: 15
        condition: db['stream'] == 'webradio'
    condition: db['state']=='play'
  - name: seqSplash
    canvases: [ { name: splash, duration: 5 } ]
    default: True
    condition: db['state']=='starting'
